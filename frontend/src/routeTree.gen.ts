/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as QueueRouteImport } from './routes/queue'
import { Route as BomRouteImport } from './routes/bom'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as IndexRouteImport } from './routes/index'
import { Route as OrdersNewRouteImport } from './routes/orders/new'
import { Route as OrdersDashboardRouteImport } from './routes/orders/dashboard'

const QueueRoute = QueueRouteImport.update({
  id: '/queue',
  path: '/queue',
  getParentRoute: () => rootRouteImport,
} as any)
const BomRoute = BomRouteImport.update({
  id: '/bom',
  path: '/bom',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const OrdersNewRoute = OrdersNewRouteImport.update({
  id: '/orders/new',
  path: '/orders/new',
  getParentRoute: () => rootRouteImport,
} as any)
const OrdersDashboardRoute = OrdersDashboardRouteImport.update({
  id: '/orders/dashboard',
  path: '/orders/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/bom': typeof BomRoute
  '/queue': typeof QueueRoute
  '/orders/dashboard': typeof OrdersDashboardRoute
  '/orders/new': typeof OrdersNewRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/bom': typeof BomRoute
  '/queue': typeof QueueRoute
  '/orders/dashboard': typeof OrdersDashboardRoute
  '/orders/new': typeof OrdersNewRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/bom': typeof BomRoute
  '/queue': typeof QueueRoute
  '/orders/dashboard': typeof OrdersDashboardRoute
  '/orders/new': typeof OrdersNewRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/bom'
    | '/queue'
    | '/orders/dashboard'
    | '/orders/new'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/admin' | '/bom' | '/queue' | '/orders/dashboard' | '/orders/new'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/bom'
    | '/queue'
    | '/orders/dashboard'
    | '/orders/new'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRoute
  BomRoute: typeof BomRoute
  QueueRoute: typeof QueueRoute
  OrdersDashboardRoute: typeof OrdersDashboardRoute
  OrdersNewRoute: typeof OrdersNewRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/queue': {
      id: '/queue'
      path: '/queue'
      fullPath: '/queue'
      preLoaderRoute: typeof QueueRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/bom': {
      id: '/bom'
      path: '/bom'
      fullPath: '/bom'
      preLoaderRoute: typeof BomRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/orders/new': {
      id: '/orders/new'
      path: '/orders/new'
      fullPath: '/orders/new'
      preLoaderRoute: typeof OrdersNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/orders/dashboard': {
      id: '/orders/dashboard'
      path: '/orders/dashboard'
      fullPath: '/orders/dashboard'
      preLoaderRoute: typeof OrdersDashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRoute,
  BomRoute: BomRoute,
  QueueRoute: QueueRoute,
  OrdersDashboardRoute: OrdersDashboardRoute,
  OrdersNewRoute: OrdersNewRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
